{"version":3,"sources":["components/Jumbotron/index.js","components/utils/API.js","components/TableHeader/index.js","components/TableRows/index.js","components/SearchForm/index.js","components/ResultsListContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","axios","get","TableHeader","scope","TableRows","props","alt","firstName","src","picture","lastName","phone","email","age","SearchForm","onSubmit","stopRefresh","value","search","type","name","onChange","handleSearchChange","placeholder","ResultsListContainer","state","employees","results","error","handleInputChange","event","preventDefault","setState","target","console","log","filter","filteredList","item","Object","values","join","toLowerCase","indexOf","filteredEmployees","API","then","res","data","catch","err","this","map","employee","key","id","first","last","dob","thumbnail","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wTAgBeA,MAbf,WACI,OACI,6BACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,2F,iDCPL,EACA,WACP,OAAOC,IAAMC,IAAI,iDCcVC,MAhBf,WACI,OACI,+BACI,4BACI,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,UCMDC,MAff,SAAmBC,GACf,OACI,+BACI,4BACI,4BAAI,yBAAKC,IAAKD,EAAME,UAAWC,IAAKH,EAAMI,WAC1C,4BAAKJ,EAAME,WACX,4BAAKF,EAAMK,UACX,4BAAKL,EAAMM,OACX,4BAAKN,EAAMO,OACX,4BAAKP,EAAMQ,Q,YCWZC,MAnBf,SAAoBT,GAChB,OACI,0BAAMU,SAAUV,EAAMW,aAClB,yBAAKjB,UAAU,QACX,2BACIkB,MAAOZ,EAAMa,OACbC,KAAK,OACLC,KAAK,SACLC,SAAUhB,EAAMiB,mBAChBC,YAAY,cCwDjBC,E,4MA1DXC,MAAQ,CACJP,OAAQ,GACRQ,UAAW,GACXC,QAAS,GACTC,MAAO,I,EASXC,kBAAoB,SAAAC,GAChBA,EAAMC,iBACN,EAAKC,SAAS,CAAEd,OAAQY,EAAMG,OAAOhB,QACrCiB,QAAQC,IAAI,SACZD,QAAQC,IAAIL,EAAMG,OAAOhB,OACzB,IAAMmB,EAASN,EAAMG,OAAOhB,MACtBoB,EAAe,EAAKZ,MAAMC,UAAUU,QAAO,SAAAE,GAK7C,OAAiD,IAHpCC,OAAOC,OAAOF,GACtBG,KAAK,IACLC,cACSC,QAAQP,EAAOM,kBAEjC,EAAKV,SAAS,CAAEY,kBAAmBP,IACnCH,QAAQC,IAAI,EAAKV,MAAMC,Y,EAG3BV,YAAc,SAAAc,GACVA,EAAMC,kB,kEAxBW,IAAD,OAChBc,IACKC,MAAK,SAAAC,GAAG,OAAI,EAAKf,SAAS,CAAEN,UAAWqB,EAAIC,KAAKrB,aAChDsB,OAAM,SAAAC,GAAG,OAAIhB,QAAQC,IAAIe,Q,+BA0B9B,OACI,6BACI,kBAAC,EAAD,CAAY5B,mBAAoB6B,KAAKtB,oBACrC,2BAAO9B,UAAU,SACb,kBAAC,EAAD,MACCoD,KAAK1B,MAAMC,UAAU0B,KAAI,SAAAC,GAAQ,OAC9B,kBAAC,EAAD,CACIC,IAAKD,EAASE,GAAGtC,MACjBV,UAAW8C,EAASjC,KAAKoC,MACzB9C,SAAU2C,EAASjC,KAAKqC,KACxB9C,MAAO0C,EAAS1C,MAChBC,MAAOyC,EAASzC,MAChBC,IAAKwC,EAASK,IAAI7C,IAClBJ,QAAS4C,EAAS5C,QAAQkD,qB,GAnDnBC,a,MCSpBC,MAXf,WACE,OAEE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAArB,GACLM,QAAQN,MAAMA,EAAMiD,c","file":"static/js/main.c44d0b9f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-4\">Employee Directory</h1>\r\n                    <p className=\"lead\">Click on carrots to filter by heading or use the search box to narrow your results.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n    employees: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=10&nat=us\");\r\n    }\r\n};","import React from 'react'\r\n\r\nfunction TableHeader() {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th scope=\"col\">Photo</th>\r\n                <th scope=\"col\">First Name</th>\r\n                <th scope=\"col\">Last Name</th>\r\n                <th scope=\"col\">Phone</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">Age</th>\r\n            </tr>\r\n        </thead>\r\n\r\n    )\r\n}\r\n\r\nexport default TableHeader\r\n","import React from 'react'\r\n\r\nfunction TableRows(props) {\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                <td><img alt={props.firstName} src={props.picture} /></td>\r\n                <td>{props.firstName}</td>\r\n                <td>{props.lastName}</td>\r\n                <td>{props.phone}</td>\r\n                <td>{props.email}</td>\r\n                <td>{props.age}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableRows\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form onSubmit={props.stopRefresh}>\r\n            <div className=\"form\">\r\n                <input\r\n                    value={props.search}\r\n                    type=\"text\"\r\n                    name=\"search\"\r\n                    onChange={props.handleSearchChange}\r\n                    placeholder=\"Filter\"\r\n                />\r\n                {/* <button type=\"submit\" onClick={props.handleSearchChange} className=\"btn btn-success\">\r\n                    Search\r\n        </button> */}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm\r\n","import React, { Component } from 'react';\r\nimport API from '../utils/API'\r\nimport TableHeader from '../TableHeader';\r\nimport TableRows from '../TableRows';\r\nimport './style.css'\r\nimport SearchForm from '../SearchForm';\r\n\r\n\r\nclass ResultsListContainer extends Component {\r\n\r\n    state = {\r\n        search: \"\",\r\n        employees: [],\r\n        results: [],\r\n        error: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.employees()\r\n            .then(res => this.setState({ employees: res.data.results }))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        event.preventDefault();\r\n        this.setState({ search: event.target.value })\r\n        console.log(\"Hello\")\r\n        console.log(event.target.value);\r\n        const filter = event.target.value;\r\n        const filteredList = this.state.employees.filter(item => {\r\n            // merge data together, then see if user input is anywhere inside\r\n            let values = Object.values(item)\r\n                .join(\"\")\r\n                .toLowerCase();\r\n            return values.indexOf(filter.toLowerCase()) !== -1;\r\n        });\r\n        this.setState({ filteredEmployees: filteredList });\r\n        console.log(this.state.employees);\r\n    }\r\n\r\n    stopRefresh = event => {\r\n        event.preventDefault();\r\n        return;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SearchForm handleSearchChange={this.handleInputChange} />\r\n                <table className=\"table\">\r\n                    <TableHeader />\r\n                    {this.state.employees.map(employee => (\r\n                        <TableRows\r\n                            key={employee.id.value}\r\n                            firstName={employee.name.first}\r\n                            lastName={employee.name.last}\r\n                            phone={employee.phone}\r\n                            email={employee.email}\r\n                            age={employee.dob.age}\r\n                            picture={employee.picture.thumbnail}\r\n                        />\r\n                    ))}\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultsListContainer\r\n","import React from 'react';\nimport Jumbotron from './components/Jumbotron';\nimport ResultsListContainer from './components/ResultsListContainer';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    // <Wrapper>\n    <div>\n      <Jumbotron />\n      <ResultsListContainer />\n    </div>\n    // </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}